package land.fx.fula;

import android.util.Log;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.module.annotations.ReactModule;

import java.io.File;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;

import fulamobile.Client;
import fulamobile.Fulamobile;
import fulamobile.Config;

import land.fx.wnfslib.LibKt;

@ReactModule(name = FulaModule.NAME)
public class FulaModule extends ReactContextBaseJavaModule {
    public static final String NAME = "FulaModule";
    Client fula;
    String appDir;
    String fulaStorePath;
    String privateForest;
    land.fx.wnfslib.Config rootConfig;

    public FulaModule(ReactApplicationContext reactContext) {
        super(reactContext);
        appDir = reactContext.getFilesDir().toString();
        fulaStorePath = appDir + "/fula";
        File storeDir = new File(fulaStorePath);
        boolean success = true;
        if (!storeDir.exists()) {
            success = storeDir.mkdirs();
        }
        if(success){
            Log.d(NAME,"Fula store folder created");
        }else{
            Log.d(NAME,"Unable to create fula store folder!");
        }
    }

    @Override
    @NonNull
    public String getName() {
        return NAME;
    }


    private byte[] toByte(String input) {
      return input.getBytes(StandardCharsets.UTF_8);
    }

  private String toString(byte[] input) {
    return new String(input, StandardCharsets.UTF_8);
  }

  private static int[] stringArrToIntArr(String[] s) {
    int[] result = new int[s.length];
    for (int i = 0; i < s.length; i++) {
      result[i] = Integer.parseInt(s[i]);
    }
    return result;
  }

  private static byte[] convertIntToByte(int[] input){
    byte[] result = new byte[input.length];
    for (int i = 0; i < input.length; i++) {
      byte b = (byte) input[i];
      result[i] = b;
    }
    return result;
  }

  private static byte[] convertStringToByte(String data){
    String[] keyInt_S = data.split(",");
    int[] keyInt = stringArrToIntArr(keyInt_S);

    return convertIntToByte(keyInt);
  }

    @ReactMethod
    public String[] init(String identityString, String storePath, Promise promise) {
      ThreadUtils.runOnExecutor(() -> {
        try{
          Log.d("init",storePath);
          byte[] identity = toByte(identityString);
          String[] obj = initInternal(identity, storePath);
          promise.resolve(obj);
        }
        catch(Exception e){
          promise.reject(e);
          Log.d("init",e.getMessage());
        }
      });
      return null;
    }

    @Nullable
    private byte[] createPeerIdentity(byte[] privateKey) {
        try {
          // TODO: First: create public key from provided private key
          // TODO: Should read the local keychain store (if it is key-value, key is public key above,
          // TODO: if found, decrypt using the private key
          // TODO: If not found or decryption not successful, generate an identity
          // TODO: then encrypt and store in keychain
          byte[] autoGeneratedIdentity = Fulamobile.generateEd25519Key();
          return autoGeneratedIdentity;
        } catch (Exception e){
          Log.d("initInternal",e.getMessage());
        }
        return null;
    }

    @Nullable
    private String[] initInternal(byte[] identity, String storePath) {
        try{
          Config config_ext = new Config();
          if(storePath == null || storePath.trim().isEmpty()) {
            config_ext.setStorePath(fulaStorePath);
          }else{
            config_ext.setStorePath(storePath);
          }

          byte[] peerIdentity = config_ext.getIdentity();
          if (peerIdentity == null || peerIdentity.length == 0) {
            peerIdentity = createPeerIdentity(identity);
            config_ext.setIdentity(peerIdentity);
          }
          this.fula = Fulamobile.newClient(config_ext);
          if(rootConfig == null) {
            this.privateForest = LibKt.createPrivateForest(this.fula);
            this.rootConfig = LibKt.createRootDir(this.fula, this.privateForest);
          }
          String peerId = this.fula.id();
          String[] obj = new String[3];
          obj[0] = peerId;
          obj[1] = rootConfig.getCid();
          obj[2] = rootConfig.getPrivate_ref();
          return obj;
        }
        catch(Exception e){
          Log.d("initInternal",e.getMessage());
        }
        return null;
    }

    @ReactMethod
    public String mkdir(String path, Promise promise) {
      ThreadUtils.runOnExecutor(() -> {
        Log.d("ReactNative", "mkdir: path = "+path);
        try{
          land.fx.wnfslib.Config config = LibKt.mkdir(this.fula, this.rootConfig.getCid(), this.rootConfig.getPrivate_ref(), path);
          this.rootConfig = config;
          promise.resolve(config.getCid());
        }
        catch(Exception e){
          promise.reject(e);
          Log.d("get",e.getMessage());
        }
      });
      return null;
    }

  @ReactMethod
  public String writeFile(String path, String contentString, Promise promise) {
    ThreadUtils.runOnExecutor(() -> {
      Log.d("ReactNative", "writeFile: contentString = "+contentString);
      Log.d("ReactNative", "writeFile: path = "+path);
      try{
        byte[] content = convertStringToByte(contentString);
        land.fx.wnfslib.Config config = LibKt.writeFile(this.fula, this.rootConfig.getCid(), this.rootConfig.getPrivate_ref(), path, content);
        this.rootConfig = config;
        promise.resolve(config.getCid());
      }
      catch(Exception e){
        promise.reject(e);
        Log.d("get",e.getMessage());
      }
    });
    return null;
  }

  @ReactMethod
  public String ls(String path, Promise promise) {
    ThreadUtils.runOnExecutor(() -> {
      Log.d("ReactNative", "ls: path = "+path);
      try{
        String res = LibKt.ls(this.fula, this.rootConfig.getCid(), this.rootConfig.getPrivate_ref(), path);
        promise.resolve(res);
      }
      catch(Exception e){
        promise.reject(e);
        Log.d("get",e.getMessage());
      }
    });
    return null;
  }

  @ReactMethod
  public String readFile(String path, Promise promise) {
    ThreadUtils.runOnExecutor(() -> {
      Log.d("ReactNative", "ls: path = "+path);
      try{
        byte[] res = LibKt.readFile(this.fula, this.rootConfig.getCid(), this.rootConfig.getPrivate_ref(), path);
        String resString = toString(res);
        promise.resolve(resString);
      }
      catch(Exception e){
        promise.reject(e);
        Log.d("get",e.getMessage());
      }
    });
    return null;
  }

    @ReactMethod
    public void get(String keyString, Promise promise) {
      ThreadUtils.runOnExecutor(() -> {
        Log.d("ReactNative", "get: keyString = "+keyString);
        try{
          byte[] key = convertStringToByte(keyString);
          byte[] value = getInternal(key);
          String valueString = toString(value);
          promise.resolve(valueString);
        }
        catch(Exception e){
          promise.reject(e);
          Log.d("get",e.getMessage());
        }
      });
    }

    @Nullable
    private byte[] getInternal(byte[] key) {
            try{
              Log.d("ReactNative", "getInternal: key.toString() = "+toString(key));
              Log.d("ReactNative", "getInternal: key.toString().bytes = "+ Arrays.toString(key));
              byte[] value = this.fula.get(key);
              Log.d("ReactNative", "getInternal: value.toString() = "+toString(value));
              return value;
            }
            catch(Exception e){
              Log.d("ReactNative", "getInternal: error = "+e.getMessage());
              Log.d("getInternal",e.getMessage());
            }
      return null;
    }

    private void hasInternal(byte[] key, Promise promise) {
      ThreadUtils.runOnExecutor(() -> {
          try{
            boolean res = this.fula.has(key);
            promise.resolve(res);
          }
          catch(Exception e){
            promise.reject(e);
            Log.d("hasInternal",e.getMessage());
          }
       });
    }

    public void pullInternal(String addr, byte[] key, Promise promise) {
        ThreadUtils.runOnExecutor(() -> {
          try{
            this.fula.pull(addr, key);
            promise.resolve(true);
          }
          catch(Exception e){
            promise.reject(e);
            Log.d("pullInternal",e.getMessage());
          }
      });
    }

    public void pushInternal(String addr, byte[] key, Promise promise){
        ThreadUtils.runOnExecutor(() -> {
          try{
            this.fula.push(addr, key);
            promise.resolve(true);
          }catch (Exception e){
            promise.reject(e);
            Log.d("pushInternal",e.getMessage());
          }
        });
    }

    @ReactMethod
    public String put(String valueString, String CodecString, Promise promise) {
      ThreadUtils.runOnExecutor(() -> {
        Log.d("ReactNative", "put: codecString = "+CodecString);
        Log.d("ReactNative", "put: valueString = "+valueString);
        try{
          byte[] codec = convertStringToByte(CodecString);

          Log.d("ReactNative", "put: key.toString() = "+toString(codec));
          byte[] value = toByte(valueString);

          Log.d("ReactNative", "put: value.toString() = "+toString(value));
          byte[] key = putInternal(value, codec);
          Log.d("ReactNative", "put: key.toString() = "+toString(key));
          promise.resolve(toString(key));
        }catch (Exception e){
          promise.reject(e);
          Log.d("ReactNative", "put: error = "+e.getMessage());
          Log.d("put",e.getMessage());
        }
      });
      return null;
    }

    @Nullable
    private byte[] putInternal(byte[] value, byte[] codec) {
          try{
            byte[] key = this.fula.put(value, codec);
            return key;
          }catch (Exception e){
            Log.d("putInternal",e.getMessage());
          }
          return null;
    }

    @ReactMethod
    public void shutdown(Promise promise) {
        ThreadUtils.runOnExecutor(() -> {
          try{
            fula.shutdown();
            promise.resolve(true);
          }catch (Exception e){
            promise.reject(e);
            Log.d("shutdown",e.getMessage());
          }
          });

    }

}
